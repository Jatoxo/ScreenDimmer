package main.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import main.Dimmable;
import main.Dimming;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;

public class DimSlider {
    private JSpinner spinner1;
    JSlider slider1;
    private JPanel mainPanel;

    private boolean isSliderChange = false;
    private boolean isDimmingChange = false;

    /**
     * A DimSlider is a slider and spinner packaged in a JPanel that can be used
     * to control the dim level of a Dimmable object.
     * @param dimmable
     */
    public DimSlider(Dimmable dimmable, String title) {
        mainPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                setEnabled(true);
            }
        });
        slider1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                setEnabled(true);
            }
        });

        //Set the title of the panel
        ((TitledBorder) mainPanel.getBorder()).setTitle(title);

        //Setup the models for the spinner and slider
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(dimmable.getDim(), 0, 90, 1);
        spinner1.setModel(spinnerModel);

        //Set the initial value of the slider
        slider1.setValue(dimmable.getDim());

        //Update the slider and spinner when the other is changed
        spinner1.addChangeListener(e -> {
            slider1.setValue((int) spinner1.getValue());
        });
        slider1.addChangeListener(e -> {
            if(isDimmingChange) {
                //If the change originated from the dimmable object, don't update the dimmable object
                return;
            }
            isSliderChange = true;
            spinner1.setValue(slider1.getValue());

            //Only actually set the dim level once
            dimmable.setDim(slider1.getValue());
            isSliderChange = false;
        });


        //Listen for changes in the dimmable object
        dimmable.addChangeListener(level -> {
            if(isSliderChange) {
                //If the change originated from the slider, don't update the slider
                return;
            }
            setSliderValue(level);
        });

    }

    private void setSliderValue(int value) {
        SwingUtilities.invokeLater(() -> {
            isDimmingChange = true;
            //System.out.println("Setting Spinner to " + level);
            spinner1.setValue(value);
            isDimmingChange = false;
        });
    }


    /**
     * Get the main panel
     * @return
     */
    public JPanel get() {
        return mainPanel;
    }

    public void setEnabled(boolean enabled) {
        slider1.setEnabled(enabled);
        spinner1.setEnabled(enabled);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 15, 10, 15), -1, -1));
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Master", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, -1, mainPanel.getFont()), null));
        spinner1 = new JSpinner();
        mainPanel.add(spinner1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slider1 = new JSlider();
        slider1.setMajorTickSpacing(10);
        slider1.setMaximum(90);
        slider1.setMinorTickSpacing(2);
        slider1.setOrientation(1);
        slider1.setPaintLabels(true);
        slider1.setPaintTicks(true);
        slider1.setSnapToTicks(false);
        mainPanel.add(slider1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if(currentFont == null) return null;
        String resultName;
        if(fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if(testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
