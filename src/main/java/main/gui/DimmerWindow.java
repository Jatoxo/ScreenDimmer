package main.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import main.Dimmable;
import main.Dimming;
import main.ScreenShade;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.Observable;
import java.util.Observer;

public class DimmerWindow {
    private JTabbedPane tabbedPane1;
    private JPanel panel1;
    private JPanel dimPanel;
    private JPanel optionsPanel;

    private final ScreenShade screenShade;


    DimSlider[] dimSliders;


    public DimmerWindow(ScreenShade screenShade) {
        this.screenShade = screenShade;



        dimPanel.setLayout(new GridLayout(1, 0));

        DimSlider masterDimmer = new DimSlider(screenShade.getMasterDimmer(), "Master");
        dimPanel.add(masterDimmer.get());

        //Get the available dimmers from ScreenShade
        Dimmable[] dimmers = screenShade.getDimmers();

        //Create a DimSlider for each dimmer
        dimSliders = new DimSlider[dimmers.length];

        for(int i = 0; i < dimmers.length; i++) {
            DimSlider dimSlider = new DimSlider(dimmers[i], "Monitor " + (i + 1));
            dimSliders[i] = dimSlider;
            dimPanel.add(dimSlider.get());
            dimSlider.setEnabled(false);

            dimSlider.addObserver((slider, new_value) -> {
                //When a monitor slider is changed, disable the master slider
                masterDimmer.setEnabled(false);
                for(DimSlider monitorSlider : dimSliders) {
                    monitorSlider.setEnabled(true);
                }
            });
        }

        masterDimmer.addObserver((slider, new_value) -> {
            //When the master slider is changed, disable all monitor sliders
            lockMonitorDimmers();
            //screenShade.setMasterDim(masterDimmer.getValue());
        });

        //When the master dimmer is changed programmatically, revert to the master dimmer
        screenShade.getMasterDimmer().addChangeListener(dimLevel -> {
            lockMonitorDimmers();
            masterDimmer.setEnabled(true);
        });

    }

    private void lockMonitorDimmers() {
        //When the master slider is changed, disable all monitor sliders
        for(DimSlider monitorSlider : dimSliders) {
            monitorSlider.setEnabled(false);
        }
    }


    public JPanel getPanel1() {
        return panel1;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setEnabled(true);
        tabbedPane1 = new JTabbedPane();
        panel1.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        dimPanel = new JPanel();
        dimPanel.setLayout(new BorderLayout(0, 0));
        tabbedPane1.addTab("Dimming", dimPanel);
        dimPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        optionsPanel = new JPanel();
        optionsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Options", optionsPanel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


}
